
import os
import subprocess
from datetime import datetime
from google import genai
from google.genai import types

CATEGORY_FILE = "CATEGORY/categories.txt"
MEMORY_FILE = "Unuusual_memory/Category/Category.txt"
OUTPUT_FILE = "CATEGORY/Products_temp.txt"

def load_categories():
    with open(CATEGORY_FILE, 'r', encoding='utf-8') as f:
        return [line.rstrip(' \n') for line in f if line.strip()]

def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, 'r', encoding='utf-8') as f:
            return [line.rstrip(' \n') for line in f if line.strip()]
    return []

def get_next_category(categories, memory):
    clean_categories = [c.replace(' ‚ñ†‚ñ†‚ñ†', '') for c in categories]
    used_clean = [m.replace(' ‚ñ†‚ñ†‚ñ†', '') for m in memory]
    for category in clean_categories:
        if category not in used_clean:
            return category
    return clean_categories[0]  # Restart if all used

def mark_used_category(categories, used_category):
    return [
        (cat + ' ‚ñ†‚ñ†‚ñ†') if cat == used_category else cat
        for cat in [c.replace(' ‚ñ†‚ñ†‚ñ†', '') for c in categories]
    ]

def save_categories(updated_categories):
    os.makedirs(os.path.dirname(CATEGORY_FILE), exist_ok=True)
    with open(CATEGORY_FILE, 'w', encoding='utf-8') as f:
        f.write('\n'.join(updated_categories) + '\n')

def commit_changes(file_to_commit):
    print(f"\nüì¶ Committing changes to GitHub: {file_to_commit}")
    try:
        subprocess.run(['git', 'config', '--global', 'user.name', 'category-bot'], check=True)
        subprocess.run(['git', 'config', '--global', 'user.email', 'bot@example.com'], check=True)
        subprocess.run(['git', 'add', file_to_commit], check=True)
        result = subprocess.run(['git', 'diff', '--cached', '--quiet'])
        if result.returncode != 0:
            msg = f"‚úÖ Update {file_to_commit} - {datetime.utcnow().isoformat()}"
            subprocess.run(['git', 'commit', '-m', msg], check=True)
            subprocess.run(['git', 'push'], check=True)
            print("‚úÖ Changes committed and pushed.")
        else:
            print("‚ÑπÔ∏è No changes to commit.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git commit failed: {e}")

def call_gemini_api(prompt):
    try:
        client = genai.Client(api_key=os.environ.get("GEMINI_API"))
        model = "gemini-2.5-flash"
        contents = [types.Content(role="user", parts=[types.Part.from_text(text=prompt)])]
        config = types.GenerateContentConfig(response_mime_type="text/plain")
        full_response = ""
        for chunk in client.models.generate_content_stream(model=model, contents=contents, config=config):
            full_response += chunk.text
        return full_response.strip()
    except Exception as e:
        print(f"‚ùå Gemini API failed: {e}")
        return None

def save_output(content, path):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content.strip() + '\n')

def main():
    categories = load_categories()
    memory = load_memory()
    next_cat = get_next_category(categories, memory)
    print(f"\nüìå Using category: {next_cat}")

    updated_categories = mark_used_category(categories, next_cat)
    save_categories(updated_categories)
    commit_changes(CATEGORY_FILE)

    prompt = (
        f"You are a world-renowned YouTube creator known for viral gadget compilation videos. "
        f"This video focuses strictly on incredible physical gadgets or devices from the category: ({next_cat}).\n\n"
        f"üéØ Task: List 50 of the most unusual, bizarre, and mind-blowing gadgets or devices currently available that would go viral in a YouTube gadget compilation video.\n\n"
        "‚ö†Ô∏è Guidelines:\n"
        "‚Ä¢ Only list physical gadgets or devices ‚Äî no apps, software, or tools\n"
        "‚Ä¢ Use only the generic name/type of the gadget or device (e.g., 'magnetic levitating lamp', 'foldable electric scooter')\n"
        "‚Ä¢ Do NOT include brand names, model numbers, or company names\n"
        "‚Ä¢ All gadgets must be real, tangible, and purchasable or announced by reputable brands\n"
        "‚Ä¢ Avoid fictional concepts or sci-fi-only devices\n"
        "‚Ä¢ Avoid any haram or inappropriate items (no sex-related, alcohol, or nudity-themed gadgets)\n"
       f"‚Ä¢ Every item must be a short, generic gadget name (2‚Äì4 words max), e.g., ‚Äúsmart mirror‚Äù, ‚Äúrobot mop‚Äù\n"
        "‚Ä¢ Format the list as: a numbered list from 1 to 50 ‚Äî one gadget per line, no descriptions\n"
        "‚Ä¢ No introductions, explanations, or closing remarks ‚Äî just the list\n"
        "‚Ä¢ Emotion to trigger in viewers: amazement, curiosity, obsession"
    )

    print(f"\nüß† Prompt:\n{prompt}")
    result = call_gemini_api(prompt)

    if result:
        save_output(result, OUTPUT_FILE)
        print("\nüí° Gemini API Result saved to:", OUTPUT_FILE)
        commit_changes(OUTPUT_FILE)
    else:
        print("\n‚ö†Ô∏è No result from Gemini API.")

if __name__ == "__main__":
    main()
