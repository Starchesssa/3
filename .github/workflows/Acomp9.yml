
name: Generate Images

on:
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Give GitHub Actions write access

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # We'll override remote with token

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests rembg opencv-python onnxruntime

      # Step 4: Create output directory
      - name: Create assets/images directory
        run: mkdir -p assets/images

      # Step 5: Run image generation script
      - name: Generate images
        run: |
          python - <<'EOF'
          import os
          import requests
          from rembg import remove

          PROMPTS_DIR = "BOOKS/Temp/PROMPTS"
          OUTPUT_DIR = "assets/images"
          os.makedirs(OUTPUT_DIR, exist_ok=True)

          def generate_image(prompt, save_path):
              url = f"https://image.pollinations.ai/prompt/{prompt.replace(' ', '%20')}"
              response = requests.get(url, stream=True)
              if response.status_code == 200:
                  with open(save_path, "wb") as f:
                      for chunk in response.iter_content(1024):
                          f.write(chunk)
                  print(f"✅ Saved: {save_path}")
              else:
                  print(f"❌ Failed to generate image for prompt: {prompt}")

          def remove_bg_and_save_as_png(jpg_path):
              with open(jpg_path, "rb") as f:
                  input_data = f.read()
              output_data = remove(input_data)

              png_path = os.path.splitext(jpg_path)[0] + ".png"
              with open(png_path, "wb") as f:
                  f.write(output_data)

              print(f"🧹 Removed background and saved as PNG: {png_path}")
              return png_path

          for txt_file in os.listdir(PROMPTS_DIR):
              if not txt_file.endswith(".txt"):
                  continue

              txt_path = os.path.join(PROMPTS_DIR, txt_file)
              with open(txt_path, "r", encoding="utf-8") as f:
                  lines = f.readlines()

              for line in lines:
                  line = line.strip()
                  if not line or "." not in line:
                      continue

                  try:
                      parts = line.split("\n", 1)
                      filename, description = parts[0], parts[1]
                  except Exception:
                      parts = line.split(" ", 1)
                      if len(parts) < 2:
                          continue
                      filename, description = parts

                  jpg_path = os.path.join(OUTPUT_DIR, os.path.splitext(filename)[0] + ".jpg")
                  generate_image(description, jpg_path)
                  remove_bg_and_save_as_png(jpg_path)
          EOF

      # Step 6: Commit and push generated images
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Use token-authenticated remote
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          git add assets/images
          if git diff --cached --quiet; then
            echo "🟡 No changes to commit."
          else
            git commit -m "Add generated images"
            git push
            echo "✅ Generated images committed and pushed."
          fi
